{"version":3,"sources":["components/Quote.js","components/QuoteList.js","components/QuoteBox.js","App.js","registerServiceWorker.js","index.js"],"names":["Quote","className","this","props","children","author","Component","QuoteList","quoteNodes","quotenodes","map","quote","key","id","quotetext","QuoteBox","state","authorChange","e","setState","target","value","console","log","quotetextChange","buttonClick","preventDefault","alert","data","push","length","emptyAll","type","placeholder","onChange","onClick","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.27246e6a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\nimport '../style/quotes.css';\n\nclass Quote extends Component {\n  \n  render() {\n    return (\n      <ul className=\"quote\">\n        <li className=\"quotetext\">{this.props.children}</li>\n        {/* comment */}\n        <li className=\"quoteauthor\">{this.props.author}</li>\n      </ul>\n    );\n  }\n}\n\nexport default Quote;\n","import React, { Component } from 'react';\nimport Quote from './Quote';\nimport '../App.css';\nimport '../style/quotes.css';\n\n\nclass QuoteList extends Component {\n  render () {\n    var quoteNodes = this.props.quotenodes.map(function(quote) {\n        return (\n          <Quote author={quote.author} key={quote.id}>\n              {quote.quotetext}\n          </Quote>\n        );\n    });\n    return (\n      <div className=\"quotelist\">\n          {quoteNodes}\n      </div>\n    );\n  }\n}\n\nexport default QuoteList;\n","import React, { Component } from 'react';\nimport QuoteList from './QuoteList';\nimport '../App.css';\nimport '../style/quotes.css';\n\nclass QuoteBox extends Component {\n  state ={author:'', quotetext:''}\n\n  authorChange = (e) => {this.setState({author: e.target.value});\n  console.log(e.target.value);}\n\n  quotetextChange = (e) => {this.setState({quotetext: e.target.value});\n  console.log(e.target.value);}\n\n  buttonClick = (e) => {\n      e.preventDefault();\n      alert(`${this.state.author} sanoi:\" ${this.state.quotetext}\"`);\n      this.setState({author:'', quotetext:''});\n      console.log(this.state.author, this.state.author);\n      data.push({id: data.length +1,author: this.state.author, quotetext: this.state.quotetext})\n      console.log(data);   \n  }\n  emptyAll = (e) => {\n    e.preventDefault();\n    alert(`KOKO LISTA TYHJENNETTY!`)\n    this.setState(data=[]);\n  }\n  render(){\n      return( \n        <div>\n      <form>\n          <input type=\"text\" placeholder=\"author\" value={this.state.author} onChange={this.authorChange} />\n          <input type=\"text\" placeholder=\"quotetext\" value={this.state.quotetext} onChange={this.quotetextChange} />\n          <input type=\"submit\" value=\"Tallenna\" onClick={this.buttonClick} />\n          <input type=\"submit\" value=\"TyhjennÃ¤ Lista\" onClick={this.emptyAll} />\n      </form>\n  \n      \n        <h1>Quotes</h1>\n        <p>Quotes: {data.length}</p>\n        <QuoteList quotenodes={data}/>\n        </div>);\n  }\n}\n\nvar data = [];\n\n\nexport default QuoteBox;\n","import React, { Component } from 'react';\nimport QuoteBox from './components/QuoteBox';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <QuoteBox/>\n      </div>\n    ); \n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}